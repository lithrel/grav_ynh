#!/bin/bash

ynh_version="2.4"

YNH_VERSION () {	# Returns the version number of the Yunohost moulinette
	ynh_version=$(sudo yunohost -v | grep "moulinette:" | cut -d' ' -f2 | cut -d'.' -f1,2)
}

CHECK_VAR () {	# Verifies that the variable is not empty.
	# $1 = Variable to be checked
	# $2 = Display text on error
	test -n "$1" || (echo "$2" >&2 && false)
}

EXIT_PROPERLY () {	# Causes the script to stop in the event of an error. And clean the residue.
	trap '' ERR
	echo -e "\e[91m \e[1m"	# Shell in light red bold
	echo -e "!!\n  $app install's script has encountered an error. Installation was cancelled.\n!!" >&2

	if type -t CLEAN_SETUP > /dev/null; then	# Checks the existence of the function before executing it.
		CLEAN_SETUP	# Call the specific cleanup function of the install script.
	fi

	# Compensates the ssowat bug that does not remove the app's input in case of installation error.
	sudo sed -i "\@\"$domain$path/\":@d" /etc/ssowat/conf.json

	if [ "$ynh_version" = "2.2" ]; then
		/bin/bash $script_dir/remove
	fi

	ynh_die
}

TRAP_ON () {	# Activate signal capture
	trap EXIT_PROPERLY ERR	# Capturing exit signals on error
}

TRAP_OFF () {	# Ignoring signal capture until TRAP_ON
	trap '' ERR	# Ignoring exit signals
}

CHECK_USER () {	# Check the validity of the user admin
	# $1 = User admin variable
	ynh_user_exists "$1" || (echo "Wrong admin" >&2 && false)
}

CHECK_PATH () {	# Checks / at the beginning of the path. And his absence at the end.
	if [ "${path:0:1}" != "/" ]; then    # If the first character is not /
		path="/$path"    # Add / at the beginning of path
	fi
	if [ "${path:${#path}-1}" == "/" ] && [ ${#path} -gt 1 ]; then    # If the last character is a / and it is not the only character.
		path="${path:0:${#path}-1}"	# Delete last character
	fi
}

CHECK_DOMAINPATH () {	# Checks the availability of the path and domain.
	sudo yunohost app checkurl $domain$path -a $app
}

CHECK_FINALPATH () {	# Checks that the destination folder is not already in use.
	final_path=/var/www/$app
	if [ -e "$final_path" ]
	then
		echo "This path already contains a folder" >&2
		false
	fi
}

GENERATE_DB () {	# Create a database and a dedicated user in the name of the app
	# $1 = Database name
	# Generates a random password.
	db_user=$1
	db_pwd=$(head -n20 /dev/urandom | tr -c -d 'A-Za-z0-9' | head -c20)
	CHECK_VAR "$db_pwd" "db_pwd empty"
	# Uses '$ app' as user name and database
	# Initializes the database and stores the mysql password.
	ynh_mysql_create_db "$db_user" "$db_user" $db_pwd
	ynh_app_setting_set $app mysqlpwd $db_pwd
}

SETUP_SOURCE () {	# Download source, decompress and copy into $final_path
	# $1 = Nom de l'archive téléchargée.
	sudo wget -nv -i ../sources/$1/source_url -O $2
	# Checks the checksum of the downloaded source.
	# md5sum -c ../sources/source_md5 --status
	# Decompress source
	if [ "$(echo ${2##*.})" == "tgz" ]; then
		tar -x -f $2
	elif [ "$(echo ${2##*.})" == "zip" ]; then
		unzip -q $2
	else
		false	# Unsupported archive format.
	fi
	# Copy file source
	sudo cp -a $(cat ../sources/$1/source_dir)/. "$final_path"
	# Copy additional file and modified
	if test -e "../sources/ajouts"; then
		sudo cp -a ../sources/ajouts/. "$final_path"
	fi
}

POOL_FPM () {	# Create the php-fpm pool configuration file and configure it.
	sed -i "s@__NAMETOCHANGE__@$app@g" ../conf/php-fpm.conf
	sed -i "s@__FINALPATH__@$final_path@g" ../conf/php-fpm.conf
	finalphpconf=/etc/php5/fpm/pool.d/$app.conf
	sudo cp ../conf/php-fpm.conf $finalphpconf
	sudo chown root: $finalphpconf
	finalphpini=/etc/php5/fpm/conf.d/20-$app.ini
	sudo cp ../conf/php-fpm.ini $finalphpini
	sudo chown root: $finalphpini
	sudo service php5-fpm reload
}

STORE_MD5_CONFIG () {	# Saves the checksum of the config file
	# $1 = Name of the conf file for storage in settings.yml
	# $2 = Full name and path of the conf file.
	ynh_app_setting_set $app $1_file_md5 $(sudo md5sum "$2" | cut -d' ' -f1)
}

CHECK_MD5_CONFIG () {	# Created a backup of the config file if it was changed.
	# $1 = Name of the conf file for storage in settings.yml
	# $2 = Full name and path of the conf file.onf.
	if [ "$(ynh_app_setting_get $app $1_file_md5)" != $(sudo md5sum "$2" | cut -d' ' -f1) ]; then
		sudo cp -a "$2" "$2.backup.$(date '+%d.%m.%y_%Hh%M,%Ss')"	# Si le fichier de config a été modifié, créer un backup.
	fi
}

FIND_PORT () {	# Search free port
	# $1 = Port number to start the search.
	port=$1
	while ! sudo yunohost app checkport $port ; do
		port=$((port+1))
	done
	CHECK_VAR "$port" "port empty"
}


### REMOVE SCRIPT

REMOVE_NGINX_CONF () {	# Delete nginx configuration
	if [ -e "/etc/nginx/conf.d/$domain.d/$app.conf" ]; then	# Delete nginx config
		echo "Delete nginx config"
		sudo rm "/etc/nginx/conf.d/$domain.d/$app.conf"
		sudo service nginx reload
	fi
}

REMOVE_FPM_CONF () {	# Delete pool php-fpm configuration
	if [ -e "/etc/php5/fpm/pool.d/$app.conf" ]; then	# Delete fpm config
		echo "Delete fpm config"
		sudo rm "/etc/php5/fpm/pool.d/$app.conf"
	fi
	if [ -e "/etc/php5/fpm/conf.d/20-$app.ini" ]; then	# Delete php config
		echo "Delete php config"
		sudo rm "/etc/php5/fpm/conf.d/20-$app.ini"
	fi
	sudo service php5-fpm reload
}

REMOVE_LOGROTATE_CONF () {	# Delete logrotate configuration
	if [ -e "/etc/logrotate.d/$app" ]; then
		echo "Delete logrotate config"
		sudo rm "/etc/logrotate.d/$app"
	fi
}

SECURE_REMOVE () {      # Deleting a folder with variable verification
	chaine="$1"	# The argument must be given between simple quotes '', to avoid interpreting the variables.
	no_var=0
	while (echo "$chaine" | grep -q '\$')	# Loop as long as there are $ in the string
	do
		no_var=1
		global_var=$(echo "$chaine" | cut -d '$' -f 2)	# Isole the first variable found.
		only_var=\$$(expr "$global_var" : '\([A-Za-z0-9_]*\)')	# Isole completely the variable by adding the $ at the beginning and keeping only the name of the variable. Mostly gets rid of / and a possible path behind.
		real_var=$(eval "echo ${only_var}")		# `eval "echo ${var}` Allows to interpret a variable contained in a variable.
		if test -z "$real_var" || [ "$real_var" = "/" ]; then
			echo "Variable $only_var is empty, suppression of $chaine cancelled." >&2
			return 1
		fi
		chaine=$(echo "$chaine" | sed "s@$only_var@$real_var@")	# Replaces variable with its value in the string.
	done
	if [ "$no_var" -eq 1 ]
	then
		if [ -e "$chaine" ]; then
			echo "Delete directory $chaine"
			sudo rm -r "$chaine"
		fi
		return 0
	else
		echo "No detected variable." >&2
		return 1
	fi
}

REMOVE_BDD () {	# Delete database and users
	# $1 = Database name
	# Uses '$app' as user name and database
	db_user=$1
	if mysqlshow -u root -p$(sudo cat $MYSQL_ROOT_PWD_FILE) | grep -q "^| $db_user"; then
		echo "Delete db"
		ynh_mysql_drop_db $db_user
		ynh_mysql_drop_user $db_user
	fi
}
